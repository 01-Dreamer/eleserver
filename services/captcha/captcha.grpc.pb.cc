// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: captcha.proto

#include "captcha.pb.h"
#include "captcha.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace CAPTCHA_RPC {

static const char* Captcha_method_names[] = {
  "/CAPTCHA_RPC.Captcha/GetCaptcha",
  "/CAPTCHA_RPC.Captcha/VerifyCaptcha",
};

std::unique_ptr< Captcha::Stub> Captcha::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Captcha::Stub> stub(new Captcha::Stub(channel));
  return stub;
}

Captcha::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCaptcha_(Captcha_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyCaptcha_(Captcha_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Captcha::Stub::GetCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::Empty& request, ::CAPTCHA_RPC::CaptchaJson* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCaptcha_, context, request, response);
}

void Captcha::Stub::experimental_async::GetCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::Empty* request, ::CAPTCHA_RPC::CaptchaJson* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptcha_, context, request, response, std::move(f));
}

void Captcha::Stub::experimental_async::GetCaptcha(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CAPTCHA_RPC::CaptchaJson* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptcha_, context, request, response, std::move(f));
}

void Captcha::Stub::experimental_async::GetCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::Empty* request, ::CAPTCHA_RPC::CaptchaJson* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptcha_, context, request, response, reactor);
}

void Captcha::Stub::experimental_async::GetCaptcha(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CAPTCHA_RPC::CaptchaJson* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptcha_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CAPTCHA_RPC::CaptchaJson>* Captcha::Stub::AsyncGetCaptchaRaw(::grpc::ClientContext* context, const ::CAPTCHA_RPC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CAPTCHA_RPC::CaptchaJson>::Create(channel_.get(), cq, rpcmethod_GetCaptcha_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CAPTCHA_RPC::CaptchaJson>* Captcha::Stub::PrepareAsyncGetCaptchaRaw(::grpc::ClientContext* context, const ::CAPTCHA_RPC::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CAPTCHA_RPC::CaptchaJson>::Create(channel_.get(), cq, rpcmethod_GetCaptcha_, context, request, false);
}

::grpc::Status Captcha::Stub::VerifyCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::CaptchaJson& request, ::CAPTCHA_RPC::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyCaptcha_, context, request, response);
}

void Captcha::Stub::experimental_async::VerifyCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::CaptchaJson* request, ::CAPTCHA_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptcha_, context, request, response, std::move(f));
}

void Captcha::Stub::experimental_async::VerifyCaptcha(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CAPTCHA_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptcha_, context, request, response, std::move(f));
}

void Captcha::Stub::experimental_async::VerifyCaptcha(::grpc::ClientContext* context, const ::CAPTCHA_RPC::CaptchaJson* request, ::CAPTCHA_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptcha_, context, request, response, reactor);
}

void Captcha::Stub::experimental_async::VerifyCaptcha(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::CAPTCHA_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptcha_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::CAPTCHA_RPC::Status>* Captcha::Stub::AsyncVerifyCaptchaRaw(::grpc::ClientContext* context, const ::CAPTCHA_RPC::CaptchaJson& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CAPTCHA_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptcha_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::CAPTCHA_RPC::Status>* Captcha::Stub::PrepareAsyncVerifyCaptchaRaw(::grpc::ClientContext* context, const ::CAPTCHA_RPC::CaptchaJson& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::CAPTCHA_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptcha_, context, request, false);
}

Captcha::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Captcha_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Captcha::Service, ::CAPTCHA_RPC::Empty, ::CAPTCHA_RPC::CaptchaJson>(
          [](Captcha::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::CAPTCHA_RPC::Empty* req,
             ::CAPTCHA_RPC::CaptchaJson* resp) {
               return service->GetCaptcha(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Captcha_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Captcha::Service, ::CAPTCHA_RPC::CaptchaJson, ::CAPTCHA_RPC::Status>(
          [](Captcha::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::CAPTCHA_RPC::CaptchaJson* req,
             ::CAPTCHA_RPC::Status* resp) {
               return service->VerifyCaptcha(ctx, req, resp);
             }, this)));
}

Captcha::Service::~Service() {
}

::grpc::Status Captcha::Service::GetCaptcha(::grpc::ServerContext* context, const ::CAPTCHA_RPC::Empty* request, ::CAPTCHA_RPC::CaptchaJson* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Captcha::Service::VerifyCaptcha(::grpc::ServerContext* context, const ::CAPTCHA_RPC::CaptchaJson* request, ::CAPTCHA_RPC::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace CAPTCHA_RPC

