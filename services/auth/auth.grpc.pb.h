// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace AUTH_RPC {

class AuthService final {
 public:
  static constexpr char const* service_full_name() {
    return "AUTH_RPC.AuthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 图形验证码
    virtual ::grpc::Status GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>> AsyncGetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>>(AsyncGetCaptchaImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>> PrepareAsyncGetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>>(PrepareAsyncGetCaptchaImageRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::AUTH_RPC::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>> AsyncVerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>>(AsyncVerifyCaptchaImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>> PrepareAsyncVerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>>(PrepareAsyncVerifyCaptchaImageRaw(context, request, cq));
    }
    // 邮箱验证码
    virtual ::grpc::Status GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>> AsyncGetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>>(AsyncGetCaptchaEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>> PrepareAsyncGetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>>(PrepareAsyncGetCaptchaEmailRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::AUTH_RPC::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>> AsyncVerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>>(AsyncVerifyCaptchaEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>> PrepareAsyncVerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>>(PrepareAsyncVerifyCaptchaEmailRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // 图形验证码
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // 邮箱验证码
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>* AsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>* PrepareAsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>* AsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>* PrepareAsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>* AsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::CaptchaImageResponse>* PrepareAsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>* AsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AUTH_RPC::Status>* PrepareAsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>> AsyncGetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>>(AsyncGetCaptchaImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>> PrepareAsyncGetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>>(PrepareAsyncGetCaptchaImageRaw(context, request, cq));
    }
    ::grpc::Status VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::AUTH_RPC::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>> AsyncVerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>>(AsyncVerifyCaptchaImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>> PrepareAsyncVerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>>(PrepareAsyncVerifyCaptchaImageRaw(context, request, cq));
    }
    ::grpc::Status GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>> AsyncGetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>>(AsyncGetCaptchaEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>> PrepareAsyncGetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>>(PrepareAsyncGetCaptchaEmailRaw(context, request, cq));
    }
    ::grpc::Status VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::AUTH_RPC::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>> AsyncVerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>>(AsyncVerifyCaptchaEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>> PrepareAsyncVerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>>(PrepareAsyncVerifyCaptchaEmailRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) override;
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) override;
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* PrepareAsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* PrepareAsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* PrepareAsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* PrepareAsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCaptchaImage_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyCaptchaImage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCaptchaEmail_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifyCaptchaEmail_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 图形验证码
    virtual ::grpc::Status GetCaptchaImage(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response);
    virtual ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response);
    // 邮箱验证码
    virtual ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response);
    virtual ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCaptchaImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptchaImage(::grpc::ServerContext* context, ::AUTH_RPC::CaptchaImageRequest* request, ::grpc::ServerAsyncResponseWriter< ::AUTH_RPC::CaptchaImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyCaptchaImage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyCaptchaImage(::grpc::ServerContext* context, ::AUTH_RPC::CaptchaImageVerification* request, ::grpc::ServerAsyncResponseWriter< ::AUTH_RPC::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCaptchaEmail() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptchaEmail(::grpc::ServerContext* context, ::AUTH_RPC::CaptchaEmailRequest* request, ::grpc::ServerAsyncResponseWriter< ::AUTH_RPC::CaptchaImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_VerifyCaptchaEmail() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyCaptchaEmail(::grpc::ServerContext* context, ::AUTH_RPC::CaptchaEmailVerification* request, ::grpc::ServerAsyncResponseWriter< ::AUTH_RPC::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCaptchaImage<WithAsyncMethod_VerifyCaptchaImage<WithAsyncMethod_GetCaptchaEmail<WithAsyncMethod_VerifyCaptchaEmail<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCaptchaImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response) { return this->GetCaptchaImage(context, request, response); }));}
    void SetMessageAllocatorFor_GetCaptchaImage(
        ::grpc::experimental::MessageAllocator< ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCaptchaImage(
      ::grpc::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCaptchaImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VerifyCaptchaImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response) { return this->VerifyCaptchaImage(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyCaptchaImage(
        ::grpc::experimental::MessageAllocator< ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyCaptchaImage(
      ::grpc::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyCaptchaImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCaptchaEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response) { return this->GetCaptchaEmail(context, request, response); }));}
    void SetMessageAllocatorFor_GetCaptchaEmail(
        ::grpc::experimental::MessageAllocator< ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCaptchaEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCaptchaEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_VerifyCaptchaEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response) { return this->VerifyCaptchaEmail(context, request, response); }));}
    void SetMessageAllocatorFor_VerifyCaptchaEmail(
        ::grpc::experimental::MessageAllocator< ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyCaptchaEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyCaptchaEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetCaptchaImage<ExperimentalWithCallbackMethod_VerifyCaptchaImage<ExperimentalWithCallbackMethod_GetCaptchaEmail<ExperimentalWithCallbackMethod_VerifyCaptchaEmail<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetCaptchaImage<ExperimentalWithCallbackMethod_VerifyCaptchaImage<ExperimentalWithCallbackMethod_GetCaptchaEmail<ExperimentalWithCallbackMethod_VerifyCaptchaEmail<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCaptchaImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyCaptchaImage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCaptchaEmail() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_VerifyCaptchaEmail() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCaptchaImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptchaImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyCaptchaImage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyCaptchaImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCaptchaEmail() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCaptchaEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_VerifyCaptchaEmail() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifyCaptchaEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCaptchaImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCaptchaImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCaptchaImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCaptchaImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyCaptchaImage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyCaptchaImage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyCaptchaImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyCaptchaImage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCaptchaEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCaptchaEmail(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCaptchaEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCaptchaEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_VerifyCaptchaEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->VerifyCaptchaEmail(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* VerifyCaptchaEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* VerifyCaptchaEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCaptchaImage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>* streamer) {
                       return this->StreamedGetCaptchaImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCaptchaImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AUTH_RPC::CaptchaImageRequest,::AUTH_RPC::CaptchaImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyCaptchaImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyCaptchaImage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>* streamer) {
                       return this->StreamedVerifyCaptchaImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyCaptchaImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyCaptchaImage(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaImageVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyCaptchaImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AUTH_RPC::CaptchaImageVerification,::AUTH_RPC::Status>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCaptchaEmail() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>* streamer) {
                       return this->StreamedGetCaptchaEmail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailRequest* /*request*/, ::AUTH_RPC::CaptchaImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCaptchaEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AUTH_RPC::CaptchaEmailRequest,::AUTH_RPC::CaptchaImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifyCaptchaEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_VerifyCaptchaEmail() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>* streamer) {
                       return this->StreamedVerifyCaptchaEmail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_VerifyCaptchaEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifyCaptchaEmail(::grpc::ServerContext* /*context*/, const ::AUTH_RPC::CaptchaEmailVerification* /*request*/, ::AUTH_RPC::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifyCaptchaEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AUTH_RPC::CaptchaEmailVerification,::AUTH_RPC::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCaptchaImage<WithStreamedUnaryMethod_VerifyCaptchaImage<WithStreamedUnaryMethod_GetCaptchaEmail<WithStreamedUnaryMethod_VerifyCaptchaEmail<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCaptchaImage<WithStreamedUnaryMethod_VerifyCaptchaImage<WithStreamedUnaryMethod_GetCaptchaEmail<WithStreamedUnaryMethod_VerifyCaptchaEmail<Service > > > > StreamedService;
};

}  // namespace AUTH_RPC


#endif  // GRPC_auth_2eproto__INCLUDED
