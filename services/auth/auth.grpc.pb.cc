// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AUTH_RPC {

static const char* AuthService_method_names[] = {
  "/AUTH_RPC.AuthService/GetCaptchaImage",
  "/AUTH_RPC.AuthService/VerifyCaptchaImage",
  "/AUTH_RPC.AuthService/GetCaptchaEmail",
  "/AUTH_RPC.AuthService/VerifyCaptchaEmail",
};

std::unique_ptr< AuthService::Stub> AuthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthService::Stub> stub(new AuthService::Stub(channel));
  return stub;
}

AuthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetCaptchaImage_(AuthService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyCaptchaImage_(AuthService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCaptchaEmail_(AuthService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyCaptchaEmail_(AuthService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthService::Stub::GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCaptchaImage_, context, request, response);
}

void AuthService::Stub::experimental_async::GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaImage_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaImage_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::GetCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaImage_, context, request, response, reactor);
}

void AuthService::Stub::experimental_async::GetCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AuthService::Stub::AsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::CaptchaImageResponse>::Create(channel_.get(), cq, rpcmethod_GetCaptchaImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AuthService::Stub::PrepareAsyncGetCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::CaptchaImageResponse>::Create(channel_.get(), cq, rpcmethod_GetCaptchaImage_, context, request, false);
}

::grpc::Status AuthService::Stub::VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::AUTH_RPC::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyCaptchaImage_, context, request, response);
}

void AuthService::Stub::experimental_async::VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaImage_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaImage_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::VerifyCaptchaImage(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaImage_, context, request, response, reactor);
}

void AuthService::Stub::experimental_async::VerifyCaptchaImage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AuthService::Stub::AsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptchaImage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AuthService::Stub::PrepareAsyncVerifyCaptchaImageRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaImageVerification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptchaImage_, context, request, false);
}

::grpc::Status AuthService::Stub::GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::AUTH_RPC::CaptchaImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCaptchaEmail_, context, request, response);
}

void AuthService::Stub::experimental_async::GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaEmail_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaEmail_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::GetCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaEmail_, context, request, response, reactor);
}

void AuthService::Stub::experimental_async::GetCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::CaptchaImageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCaptchaEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AuthService::Stub::AsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::CaptchaImageResponse>::Create(channel_.get(), cq, rpcmethod_GetCaptchaEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::CaptchaImageResponse>* AuthService::Stub::PrepareAsyncGetCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::CaptchaImageResponse>::Create(channel_.get(), cq, rpcmethod_GetCaptchaEmail_, context, request, false);
}

::grpc::Status AuthService::Stub::VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::AUTH_RPC::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyCaptchaEmail_, context, request, response);
}

void AuthService::Stub::experimental_async::VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaEmail_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaEmail_, context, request, response, std::move(f));
}

void AuthService::Stub::experimental_async::VerifyCaptchaEmail(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaEmail_, context, request, response, reactor);
}

void AuthService::Stub::experimental_async::VerifyCaptchaEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AUTH_RPC::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyCaptchaEmail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AuthService::Stub::AsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptchaEmail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AUTH_RPC::Status>* AuthService::Stub::PrepareAsyncVerifyCaptchaEmailRaw(::grpc::ClientContext* context, const ::AUTH_RPC::CaptchaEmailVerification& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AUTH_RPC::Status>::Create(channel_.get(), cq, rpcmethod_VerifyCaptchaEmail_, context, request, false);
}

AuthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::AUTH_RPC::CaptchaImageRequest, ::AUTH_RPC::CaptchaImageResponse>(
          [](AuthService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::AUTH_RPC::CaptchaImageRequest* req,
             ::AUTH_RPC::CaptchaImageResponse* resp) {
               return service->GetCaptchaImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::AUTH_RPC::CaptchaImageVerification, ::AUTH_RPC::Status>(
          [](AuthService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::AUTH_RPC::CaptchaImageVerification* req,
             ::AUTH_RPC::Status* resp) {
               return service->VerifyCaptchaImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::AUTH_RPC::CaptchaEmailRequest, ::AUTH_RPC::CaptchaImageResponse>(
          [](AuthService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::AUTH_RPC::CaptchaEmailRequest* req,
             ::AUTH_RPC::CaptchaImageResponse* resp) {
               return service->GetCaptchaEmail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::AUTH_RPC::CaptchaEmailVerification, ::AUTH_RPC::Status>(
          [](AuthService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::AUTH_RPC::CaptchaEmailVerification* req,
             ::AUTH_RPC::Status* resp) {
               return service->VerifyCaptchaEmail(ctx, req, resp);
             }, this)));
}

AuthService::Service::~Service() {
}

::grpc::Status AuthService::Service::GetCaptchaImage(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaImageRequest* request, ::AUTH_RPC::CaptchaImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::VerifyCaptchaImage(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaImageVerification* request, ::AUTH_RPC::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::GetCaptchaEmail(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaEmailRequest* request, ::AUTH_RPC::CaptchaImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::VerifyCaptchaEmail(::grpc::ServerContext* context, const ::AUTH_RPC::CaptchaEmailVerification* request, ::AUTH_RPC::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AUTH_RPC

