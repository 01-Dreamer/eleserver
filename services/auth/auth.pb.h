// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace AUTH_RPC {
class CaptchaEmailRequest;
class CaptchaEmailRequestDefaultTypeInternal;
extern CaptchaEmailRequestDefaultTypeInternal _CaptchaEmailRequest_default_instance_;
class CaptchaEmailResponse;
class CaptchaEmailResponseDefaultTypeInternal;
extern CaptchaEmailResponseDefaultTypeInternal _CaptchaEmailResponse_default_instance_;
class CaptchaEmailVerification;
class CaptchaEmailVerificationDefaultTypeInternal;
extern CaptchaEmailVerificationDefaultTypeInternal _CaptchaEmailVerification_default_instance_;
class CaptchaImageRequest;
class CaptchaImageRequestDefaultTypeInternal;
extern CaptchaImageRequestDefaultTypeInternal _CaptchaImageRequest_default_instance_;
class CaptchaImageResponse;
class CaptchaImageResponseDefaultTypeInternal;
extern CaptchaImageResponseDefaultTypeInternal _CaptchaImageResponse_default_instance_;
class CaptchaImageVerification;
class CaptchaImageVerificationDefaultTypeInternal;
extern CaptchaImageVerificationDefaultTypeInternal _CaptchaImageVerification_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace AUTH_RPC
PROTOBUF_NAMESPACE_OPEN
template<> ::AUTH_RPC::CaptchaEmailRequest* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaEmailRequest>(Arena*);
template<> ::AUTH_RPC::CaptchaEmailResponse* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaEmailResponse>(Arena*);
template<> ::AUTH_RPC::CaptchaEmailVerification* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaEmailVerification>(Arena*);
template<> ::AUTH_RPC::CaptchaImageRequest* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaImageRequest>(Arena*);
template<> ::AUTH_RPC::CaptchaImageResponse* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaImageResponse>(Arena*);
template<> ::AUTH_RPC::CaptchaImageVerification* Arena::CreateMaybeMessage<::AUTH_RPC::CaptchaImageVerification>(Arena*);
template<> ::AUTH_RPC::Status* Arena::CreateMaybeMessage<::AUTH_RPC::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AUTH_RPC {

// ===================================================================

class CaptchaImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaImageRequest) */ {
 public:
  inline CaptchaImageRequest() : CaptchaImageRequest(nullptr) {};
  virtual ~CaptchaImageRequest();

  CaptchaImageRequest(const CaptchaImageRequest& from);
  CaptchaImageRequest(CaptchaImageRequest&& from) noexcept
    : CaptchaImageRequest() {
    *this = ::std::move(from);
  }

  inline CaptchaImageRequest& operator=(const CaptchaImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaImageRequest& operator=(CaptchaImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaImageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaImageRequest* internal_default_instance() {
    return reinterpret_cast<const CaptchaImageRequest*>(
               &_CaptchaImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CaptchaImageRequest& a, CaptchaImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaImageRequest* New() const final {
    return CreateMaybeMessage<CaptchaImageRequest>(nullptr);
  }

  CaptchaImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaImageRequest& from);
  void MergeFrom(const CaptchaImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaImageRequest";
  }
  protected:
  explicit CaptchaImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CaptchaImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaImageResponse) */ {
 public:
  inline CaptchaImageResponse() : CaptchaImageResponse(nullptr) {};
  virtual ~CaptchaImageResponse();

  CaptchaImageResponse(const CaptchaImageResponse& from);
  CaptchaImageResponse(CaptchaImageResponse&& from) noexcept
    : CaptchaImageResponse() {
    *this = ::std::move(from);
  }

  inline CaptchaImageResponse& operator=(const CaptchaImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaImageResponse& operator=(CaptchaImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaImageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaImageResponse* internal_default_instance() {
    return reinterpret_cast<const CaptchaImageResponse*>(
               &_CaptchaImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CaptchaImageResponse& a, CaptchaImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaImageResponse* New() const final {
    return CreateMaybeMessage<CaptchaImageResponse>(nullptr);
  }

  CaptchaImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaImageResponse& from);
  void MergeFrom(const CaptchaImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaImageResponse";
  }
  protected:
  explicit CaptchaImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaImageIdFieldNumber = 1,
    kCaptchaImageBase64FieldNumber = 2,
  };
  // string captcha_image_id = 1;
  void clear_captcha_image_id();
  const std::string& captcha_image_id() const;
  void set_captcha_image_id(const std::string& value);
  void set_captcha_image_id(std::string&& value);
  void set_captcha_image_id(const char* value);
  void set_captcha_image_id(const char* value, size_t size);
  std::string* mutable_captcha_image_id();
  std::string* release_captcha_image_id();
  void set_allocated_captcha_image_id(std::string* captcha_image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_image_id(
      std::string* captcha_image_id);
  private:
  const std::string& _internal_captcha_image_id() const;
  void _internal_set_captcha_image_id(const std::string& value);
  std::string* _internal_mutable_captcha_image_id();
  public:

  // string captcha_image_base64 = 2;
  void clear_captcha_image_base64();
  const std::string& captcha_image_base64() const;
  void set_captcha_image_base64(const std::string& value);
  void set_captcha_image_base64(std::string&& value);
  void set_captcha_image_base64(const char* value);
  void set_captcha_image_base64(const char* value, size_t size);
  std::string* mutable_captcha_image_base64();
  std::string* release_captcha_image_base64();
  void set_allocated_captcha_image_base64(std::string* captcha_image_base64);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_image_base64();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_image_base64(
      std::string* captcha_image_base64);
  private:
  const std::string& _internal_captcha_image_base64() const;
  void _internal_set_captcha_image_base64(const std::string& value);
  std::string* _internal_mutable_captcha_image_base64();
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_image_base64_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CaptchaImageVerification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaImageVerification) */ {
 public:
  inline CaptchaImageVerification() : CaptchaImageVerification(nullptr) {};
  virtual ~CaptchaImageVerification();

  CaptchaImageVerification(const CaptchaImageVerification& from);
  CaptchaImageVerification(CaptchaImageVerification&& from) noexcept
    : CaptchaImageVerification() {
    *this = ::std::move(from);
  }

  inline CaptchaImageVerification& operator=(const CaptchaImageVerification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaImageVerification& operator=(CaptchaImageVerification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaImageVerification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaImageVerification* internal_default_instance() {
    return reinterpret_cast<const CaptchaImageVerification*>(
               &_CaptchaImageVerification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CaptchaImageVerification& a, CaptchaImageVerification& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaImageVerification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaImageVerification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaImageVerification* New() const final {
    return CreateMaybeMessage<CaptchaImageVerification>(nullptr);
  }

  CaptchaImageVerification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaImageVerification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaImageVerification& from);
  void MergeFrom(const CaptchaImageVerification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaImageVerification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaImageVerification";
  }
  protected:
  explicit CaptchaImageVerification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaImageIdFieldNumber = 1,
    kCaptchaImageValueFieldNumber = 2,
  };
  // string captcha_image_id = 1;
  void clear_captcha_image_id();
  const std::string& captcha_image_id() const;
  void set_captcha_image_id(const std::string& value);
  void set_captcha_image_id(std::string&& value);
  void set_captcha_image_id(const char* value);
  void set_captcha_image_id(const char* value, size_t size);
  std::string* mutable_captcha_image_id();
  std::string* release_captcha_image_id();
  void set_allocated_captcha_image_id(std::string* captcha_image_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_image_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_image_id(
      std::string* captcha_image_id);
  private:
  const std::string& _internal_captcha_image_id() const;
  void _internal_set_captcha_image_id(const std::string& value);
  std::string* _internal_mutable_captcha_image_id();
  public:

  // string captcha_image_value = 2;
  void clear_captcha_image_value();
  const std::string& captcha_image_value() const;
  void set_captcha_image_value(const std::string& value);
  void set_captcha_image_value(std::string&& value);
  void set_captcha_image_value(const char* value);
  void set_captcha_image_value(const char* value, size_t size);
  std::string* mutable_captcha_image_value();
  std::string* release_captcha_image_value();
  void set_allocated_captcha_image_value(std::string* captcha_image_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_image_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_image_value(
      std::string* captcha_image_value);
  private:
  const std::string& _internal_captcha_image_value() const;
  void _internal_set_captcha_image_value(const std::string& value);
  std::string* _internal_mutable_captcha_image_value();
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaImageVerification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_image_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_image_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CaptchaEmailRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaEmailRequest) */ {
 public:
  inline CaptchaEmailRequest() : CaptchaEmailRequest(nullptr) {};
  virtual ~CaptchaEmailRequest();

  CaptchaEmailRequest(const CaptchaEmailRequest& from);
  CaptchaEmailRequest(CaptchaEmailRequest&& from) noexcept
    : CaptchaEmailRequest() {
    *this = ::std::move(from);
  }

  inline CaptchaEmailRequest& operator=(const CaptchaEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaEmailRequest& operator=(CaptchaEmailRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaEmailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaEmailRequest* internal_default_instance() {
    return reinterpret_cast<const CaptchaEmailRequest*>(
               &_CaptchaEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CaptchaEmailRequest& a, CaptchaEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaEmailRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaEmailRequest* New() const final {
    return CreateMaybeMessage<CaptchaEmailRequest>(nullptr);
  }

  CaptchaEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaEmailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaEmailRequest& from);
  void MergeFrom(const CaptchaEmailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaEmailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaEmailRequest";
  }
  protected:
  explicit CaptchaEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CaptchaEmailResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaEmailResponse) */ {
 public:
  inline CaptchaEmailResponse() : CaptchaEmailResponse(nullptr) {};
  virtual ~CaptchaEmailResponse();

  CaptchaEmailResponse(const CaptchaEmailResponse& from);
  CaptchaEmailResponse(CaptchaEmailResponse&& from) noexcept
    : CaptchaEmailResponse() {
    *this = ::std::move(from);
  }

  inline CaptchaEmailResponse& operator=(const CaptchaEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaEmailResponse& operator=(CaptchaEmailResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaEmailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaEmailResponse* internal_default_instance() {
    return reinterpret_cast<const CaptchaEmailResponse*>(
               &_CaptchaEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CaptchaEmailResponse& a, CaptchaEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaEmailResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaEmailResponse* New() const final {
    return CreateMaybeMessage<CaptchaEmailResponse>(nullptr);
  }

  CaptchaEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaEmailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaEmailResponse& from);
  void MergeFrom(const CaptchaEmailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaEmailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaEmailResponse";
  }
  protected:
  explicit CaptchaEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaEmailIdFieldNumber = 1,
  };
  // string captcha_email_id = 1;
  void clear_captcha_email_id();
  const std::string& captcha_email_id() const;
  void set_captcha_email_id(const std::string& value);
  void set_captcha_email_id(std::string&& value);
  void set_captcha_email_id(const char* value);
  void set_captcha_email_id(const char* value, size_t size);
  std::string* mutable_captcha_email_id();
  std::string* release_captcha_email_id();
  void set_allocated_captcha_email_id(std::string* captcha_email_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_email_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_email_id(
      std::string* captcha_email_id);
  private:
  const std::string& _internal_captcha_email_id() const;
  void _internal_set_captcha_email_id(const std::string& value);
  std::string* _internal_mutable_captcha_email_id();
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_email_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class CaptchaEmailVerification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.CaptchaEmailVerification) */ {
 public:
  inline CaptchaEmailVerification() : CaptchaEmailVerification(nullptr) {};
  virtual ~CaptchaEmailVerification();

  CaptchaEmailVerification(const CaptchaEmailVerification& from);
  CaptchaEmailVerification(CaptchaEmailVerification&& from) noexcept
    : CaptchaEmailVerification() {
    *this = ::std::move(from);
  }

  inline CaptchaEmailVerification& operator=(const CaptchaEmailVerification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptchaEmailVerification& operator=(CaptchaEmailVerification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CaptchaEmailVerification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CaptchaEmailVerification* internal_default_instance() {
    return reinterpret_cast<const CaptchaEmailVerification*>(
               &_CaptchaEmailVerification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CaptchaEmailVerification& a, CaptchaEmailVerification& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptchaEmailVerification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptchaEmailVerification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CaptchaEmailVerification* New() const final {
    return CreateMaybeMessage<CaptchaEmailVerification>(nullptr);
  }

  CaptchaEmailVerification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CaptchaEmailVerification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CaptchaEmailVerification& from);
  void MergeFrom(const CaptchaEmailVerification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptchaEmailVerification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.CaptchaEmailVerification";
  }
  protected:
  explicit CaptchaEmailVerification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptchaEmailIdFieldNumber = 1,
    kCaptchaEmailValueFieldNumber = 2,
  };
  // string captcha_email_id = 1;
  void clear_captcha_email_id();
  const std::string& captcha_email_id() const;
  void set_captcha_email_id(const std::string& value);
  void set_captcha_email_id(std::string&& value);
  void set_captcha_email_id(const char* value);
  void set_captcha_email_id(const char* value, size_t size);
  std::string* mutable_captcha_email_id();
  std::string* release_captcha_email_id();
  void set_allocated_captcha_email_id(std::string* captcha_email_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_email_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_email_id(
      std::string* captcha_email_id);
  private:
  const std::string& _internal_captcha_email_id() const;
  void _internal_set_captcha_email_id(const std::string& value);
  std::string* _internal_mutable_captcha_email_id();
  public:

  // string captcha_email_value = 2;
  void clear_captcha_email_value();
  const std::string& captcha_email_value() const;
  void set_captcha_email_value(const std::string& value);
  void set_captcha_email_value(std::string&& value);
  void set_captcha_email_value(const char* value);
  void set_captcha_email_value(const char* value, size_t size);
  std::string* mutable_captcha_email_value();
  std::string* release_captcha_email_value();
  void set_allocated_captcha_email_value(std::string* captcha_email_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_captcha_email_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_captcha_email_value(
      std::string* captcha_email_value);
  private:
  const std::string& _internal_captcha_email_value() const;
  void _internal_set_captcha_email_value(const std::string& value);
  std::string* _internal_mutable_captcha_email_value();
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.CaptchaEmailVerification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_email_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr captcha_email_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class Status PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AUTH_RPC.Status) */ {
 public:
  inline Status() : Status(nullptr) {};
  virtual ~Status();

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(nullptr);
  }

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AUTH_RPC.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_auth_2eproto);
    return ::descriptor_table_auth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:AUTH_RPC.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CaptchaImageRequest

// -------------------------------------------------------------------

// CaptchaImageResponse

// string captcha_image_id = 1;
inline void CaptchaImageResponse::clear_captcha_image_id() {
  captcha_image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaImageResponse::captcha_image_id() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
  return _internal_captcha_image_id();
}
inline void CaptchaImageResponse::set_captcha_image_id(const std::string& value) {
  _internal_set_captcha_image_id(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}
inline std::string* CaptchaImageResponse::mutable_captcha_image_id() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
  return _internal_mutable_captcha_image_id();
}
inline const std::string& CaptchaImageResponse::_internal_captcha_image_id() const {
  return captcha_image_id_.Get();
}
inline void CaptchaImageResponse::_internal_set_captcha_image_id(const std::string& value) {
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaImageResponse::set_captcha_image_id(std::string&& value) {
  
  captcha_image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}
inline void CaptchaImageResponse::set_captcha_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}
inline void CaptchaImageResponse::set_captcha_image_id(const char* value,
    size_t size) {
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}
inline std::string* CaptchaImageResponse::_internal_mutable_captcha_image_id() {
  
  return captcha_image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaImageResponse::release_captcha_image_id() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
  return captcha_image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaImageResponse::set_allocated_captcha_image_id(std::string* captcha_image_id) {
  if (captcha_image_id != nullptr) {
    
  } else {
    
  }
  captcha_image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}
inline std::string* CaptchaImageResponse::unsafe_arena_release_captcha_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaImageResponse::unsafe_arena_set_allocated_captcha_image_id(
    std::string* captcha_image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_image_id != nullptr) {
    
  } else {
    
  }
  captcha_image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaImageResponse.captcha_image_id)
}

// string captcha_image_base64 = 2;
inline void CaptchaImageResponse::clear_captcha_image_base64() {
  captcha_image_base64_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaImageResponse::captcha_image_base64() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
  return _internal_captcha_image_base64();
}
inline void CaptchaImageResponse::set_captcha_image_base64(const std::string& value) {
  _internal_set_captcha_image_base64(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}
inline std::string* CaptchaImageResponse::mutable_captcha_image_base64() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
  return _internal_mutable_captcha_image_base64();
}
inline const std::string& CaptchaImageResponse::_internal_captcha_image_base64() const {
  return captcha_image_base64_.Get();
}
inline void CaptchaImageResponse::_internal_set_captcha_image_base64(const std::string& value) {
  
  captcha_image_base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaImageResponse::set_captcha_image_base64(std::string&& value) {
  
  captcha_image_base64_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}
inline void CaptchaImageResponse::set_captcha_image_base64(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_image_base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}
inline void CaptchaImageResponse::set_captcha_image_base64(const char* value,
    size_t size) {
  
  captcha_image_base64_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}
inline std::string* CaptchaImageResponse::_internal_mutable_captcha_image_base64() {
  
  return captcha_image_base64_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaImageResponse::release_captcha_image_base64() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
  return captcha_image_base64_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaImageResponse::set_allocated_captcha_image_base64(std::string* captcha_image_base64) {
  if (captcha_image_base64 != nullptr) {
    
  } else {
    
  }
  captcha_image_base64_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_image_base64,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}
inline std::string* CaptchaImageResponse::unsafe_arena_release_captcha_image_base64() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_image_base64_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaImageResponse::unsafe_arena_set_allocated_captcha_image_base64(
    std::string* captcha_image_base64) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_image_base64 != nullptr) {
    
  } else {
    
  }
  captcha_image_base64_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_image_base64, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaImageResponse.captcha_image_base64)
}

// -------------------------------------------------------------------

// CaptchaImageVerification

// string captcha_image_id = 1;
inline void CaptchaImageVerification::clear_captcha_image_id() {
  captcha_image_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaImageVerification::captcha_image_id() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
  return _internal_captcha_image_id();
}
inline void CaptchaImageVerification::set_captcha_image_id(const std::string& value) {
  _internal_set_captcha_image_id(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}
inline std::string* CaptchaImageVerification::mutable_captcha_image_id() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
  return _internal_mutable_captcha_image_id();
}
inline const std::string& CaptchaImageVerification::_internal_captcha_image_id() const {
  return captcha_image_id_.Get();
}
inline void CaptchaImageVerification::_internal_set_captcha_image_id(const std::string& value) {
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaImageVerification::set_captcha_image_id(std::string&& value) {
  
  captcha_image_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}
inline void CaptchaImageVerification::set_captcha_image_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}
inline void CaptchaImageVerification::set_captcha_image_id(const char* value,
    size_t size) {
  
  captcha_image_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}
inline std::string* CaptchaImageVerification::_internal_mutable_captcha_image_id() {
  
  return captcha_image_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaImageVerification::release_captcha_image_id() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
  return captcha_image_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaImageVerification::set_allocated_captcha_image_id(std::string* captcha_image_id) {
  if (captcha_image_id != nullptr) {
    
  } else {
    
  }
  captcha_image_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_image_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}
inline std::string* CaptchaImageVerification::unsafe_arena_release_captcha_image_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_image_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaImageVerification::unsafe_arena_set_allocated_captcha_image_id(
    std::string* captcha_image_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_image_id != nullptr) {
    
  } else {
    
  }
  captcha_image_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_image_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaImageVerification.captcha_image_id)
}

// string captcha_image_value = 2;
inline void CaptchaImageVerification::clear_captcha_image_value() {
  captcha_image_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaImageVerification::captcha_image_value() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
  return _internal_captcha_image_value();
}
inline void CaptchaImageVerification::set_captcha_image_value(const std::string& value) {
  _internal_set_captcha_image_value(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}
inline std::string* CaptchaImageVerification::mutable_captcha_image_value() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
  return _internal_mutable_captcha_image_value();
}
inline const std::string& CaptchaImageVerification::_internal_captcha_image_value() const {
  return captcha_image_value_.Get();
}
inline void CaptchaImageVerification::_internal_set_captcha_image_value(const std::string& value) {
  
  captcha_image_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaImageVerification::set_captcha_image_value(std::string&& value) {
  
  captcha_image_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}
inline void CaptchaImageVerification::set_captcha_image_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_image_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}
inline void CaptchaImageVerification::set_captcha_image_value(const char* value,
    size_t size) {
  
  captcha_image_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}
inline std::string* CaptchaImageVerification::_internal_mutable_captcha_image_value() {
  
  return captcha_image_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaImageVerification::release_captcha_image_value() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
  return captcha_image_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaImageVerification::set_allocated_captcha_image_value(std::string* captcha_image_value) {
  if (captcha_image_value != nullptr) {
    
  } else {
    
  }
  captcha_image_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_image_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}
inline std::string* CaptchaImageVerification::unsafe_arena_release_captcha_image_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_image_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaImageVerification::unsafe_arena_set_allocated_captcha_image_value(
    std::string* captcha_image_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_image_value != nullptr) {
    
  } else {
    
  }
  captcha_image_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_image_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaImageVerification.captcha_image_value)
}

// -------------------------------------------------------------------

// CaptchaEmailRequest

// string email = 1;
inline void CaptchaEmailRequest::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaEmailRequest::email() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaEmailRequest.email)
  return _internal_email();
}
inline void CaptchaEmailRequest::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaEmailRequest.email)
}
inline std::string* CaptchaEmailRequest::mutable_email() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaEmailRequest.email)
  return _internal_mutable_email();
}
inline const std::string& CaptchaEmailRequest::_internal_email() const {
  return email_.Get();
}
inline void CaptchaEmailRequest::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaEmailRequest::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaEmailRequest.email)
}
inline void CaptchaEmailRequest::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaEmailRequest.email)
}
inline void CaptchaEmailRequest::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaEmailRequest.email)
}
inline std::string* CaptchaEmailRequest::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaEmailRequest::release_email() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaEmailRequest.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaEmailRequest::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaEmailRequest.email)
}
inline std::string* CaptchaEmailRequest::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaEmailRequest.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaEmailRequest::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaEmailRequest.email)
}

// -------------------------------------------------------------------

// CaptchaEmailResponse

// string captcha_email_id = 1;
inline void CaptchaEmailResponse::clear_captcha_email_id() {
  captcha_email_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaEmailResponse::captcha_email_id() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
  return _internal_captcha_email_id();
}
inline void CaptchaEmailResponse::set_captcha_email_id(const std::string& value) {
  _internal_set_captcha_email_id(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}
inline std::string* CaptchaEmailResponse::mutable_captcha_email_id() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
  return _internal_mutable_captcha_email_id();
}
inline const std::string& CaptchaEmailResponse::_internal_captcha_email_id() const {
  return captcha_email_id_.Get();
}
inline void CaptchaEmailResponse::_internal_set_captcha_email_id(const std::string& value) {
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaEmailResponse::set_captcha_email_id(std::string&& value) {
  
  captcha_email_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}
inline void CaptchaEmailResponse::set_captcha_email_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}
inline void CaptchaEmailResponse::set_captcha_email_id(const char* value,
    size_t size) {
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}
inline std::string* CaptchaEmailResponse::_internal_mutable_captcha_email_id() {
  
  return captcha_email_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaEmailResponse::release_captcha_email_id() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
  return captcha_email_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaEmailResponse::set_allocated_captcha_email_id(std::string* captcha_email_id) {
  if (captcha_email_id != nullptr) {
    
  } else {
    
  }
  captcha_email_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_email_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}
inline std::string* CaptchaEmailResponse::unsafe_arena_release_captcha_email_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_email_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaEmailResponse::unsafe_arena_set_allocated_captcha_email_id(
    std::string* captcha_email_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_email_id != nullptr) {
    
  } else {
    
  }
  captcha_email_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_email_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaEmailResponse.captcha_email_id)
}

// -------------------------------------------------------------------

// CaptchaEmailVerification

// string captcha_email_id = 1;
inline void CaptchaEmailVerification::clear_captcha_email_id() {
  captcha_email_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaEmailVerification::captcha_email_id() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
  return _internal_captcha_email_id();
}
inline void CaptchaEmailVerification::set_captcha_email_id(const std::string& value) {
  _internal_set_captcha_email_id(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}
inline std::string* CaptchaEmailVerification::mutable_captcha_email_id() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
  return _internal_mutable_captcha_email_id();
}
inline const std::string& CaptchaEmailVerification::_internal_captcha_email_id() const {
  return captcha_email_id_.Get();
}
inline void CaptchaEmailVerification::_internal_set_captcha_email_id(const std::string& value) {
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaEmailVerification::set_captcha_email_id(std::string&& value) {
  
  captcha_email_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}
inline void CaptchaEmailVerification::set_captcha_email_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}
inline void CaptchaEmailVerification::set_captcha_email_id(const char* value,
    size_t size) {
  
  captcha_email_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}
inline std::string* CaptchaEmailVerification::_internal_mutable_captcha_email_id() {
  
  return captcha_email_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaEmailVerification::release_captcha_email_id() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
  return captcha_email_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaEmailVerification::set_allocated_captcha_email_id(std::string* captcha_email_id) {
  if (captcha_email_id != nullptr) {
    
  } else {
    
  }
  captcha_email_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_email_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}
inline std::string* CaptchaEmailVerification::unsafe_arena_release_captcha_email_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_email_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaEmailVerification::unsafe_arena_set_allocated_captcha_email_id(
    std::string* captcha_email_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_email_id != nullptr) {
    
  } else {
    
  }
  captcha_email_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_email_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaEmailVerification.captcha_email_id)
}

// string captcha_email_value = 2;
inline void CaptchaEmailVerification::clear_captcha_email_value() {
  captcha_email_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CaptchaEmailVerification::captcha_email_value() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
  return _internal_captcha_email_value();
}
inline void CaptchaEmailVerification::set_captcha_email_value(const std::string& value) {
  _internal_set_captcha_email_value(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}
inline std::string* CaptchaEmailVerification::mutable_captcha_email_value() {
  // @@protoc_insertion_point(field_mutable:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
  return _internal_mutable_captcha_email_value();
}
inline const std::string& CaptchaEmailVerification::_internal_captcha_email_value() const {
  return captcha_email_value_.Get();
}
inline void CaptchaEmailVerification::_internal_set_captcha_email_value(const std::string& value) {
  
  captcha_email_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CaptchaEmailVerification::set_captcha_email_value(std::string&& value) {
  
  captcha_email_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}
inline void CaptchaEmailVerification::set_captcha_email_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  captcha_email_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}
inline void CaptchaEmailVerification::set_captcha_email_value(const char* value,
    size_t size) {
  
  captcha_email_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}
inline std::string* CaptchaEmailVerification::_internal_mutable_captcha_email_value() {
  
  return captcha_email_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CaptchaEmailVerification::release_captcha_email_value() {
  // @@protoc_insertion_point(field_release:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
  return captcha_email_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CaptchaEmailVerification::set_allocated_captcha_email_value(std::string* captcha_email_value) {
  if (captcha_email_value != nullptr) {
    
  } else {
    
  }
  captcha_email_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), captcha_email_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}
inline std::string* CaptchaEmailVerification::unsafe_arena_release_captcha_email_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return captcha_email_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CaptchaEmailVerification::unsafe_arena_set_allocated_captcha_email_value(
    std::string* captcha_email_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (captcha_email_value != nullptr) {
    
  } else {
    
  }
  captcha_email_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      captcha_email_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AUTH_RPC.CaptchaEmailVerification.captcha_email_value)
}

// -------------------------------------------------------------------

// Status

// bool status = 1;
inline void Status::clear_status() {
  status_ = false;
}
inline bool Status::_internal_status() const {
  return status_;
}
inline bool Status::status() const {
  // @@protoc_insertion_point(field_get:AUTH_RPC.Status.status)
  return _internal_status();
}
inline void Status::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void Status::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AUTH_RPC.Status.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AUTH_RPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
